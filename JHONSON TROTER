#include <stdio.h>
#include <stdlib.h>

#define MAX 10

#define LEFT -1
#define RIGHT 1

typedef struct {
    int value;
    int direction;
} Element;

void printPermutation(Element arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i].value);
    }
    printf("\n");
}

int findLargestMobile(Element arr[], int n) {
    int largestMobileIndex = -1;
    int largestMobileValue = 0;

    for (int i = 0; i < n; i++) {
        int dir = arr[i].direction;
        int adjIndex = i + dir;

        if (adjIndex >= 0 && adjIndex < n) {
            if (arr[i].value > arr[adjIndex].value) {
                if (arr[i].value > largestMobileValue) {
                    largestMobileValue = arr[i].value;
                    largestMobileIndex = i;
                }
            }
        }
    }
    return largestMobileIndex;
}

void johnsonTrotter(int n) {
    Element arr[MAX];

    for (int i = 0; i < n; i++) {
        arr[i].value = i + 1;
        arr[i].direction = LEFT;
    }

    printPermutation(arr, n);

    while (1) {
        int largestMobileIndex = findLargestMobile(arr, n);
        if (largestMobileIndex == -1) break;

        int dir = arr[largestMobileIndex].direction;
        int swapIndex = largestMobileIndex + dir;

        Element temp = arr[largestMobileIndex];
        arr[largestMobileIndex] = arr[swapIndex];
        arr[swapIndex] = temp;

        largestMobileIndex = swapIndex;

        for (int i = 0; i < n; i++) {
            if (arr[i].value > temp.value) {
                arr[i].direction = -arr[i].direction;
            }
        }

        printPermutation(arr, n);
    }
}

int main() {
    int n;
    printf("Enter n for permutations: ");
    scanf("%d", &n);

    printf("All permutations generated by Johnson-Trotter algorithm:\n");
    johnsonTrotter(n);

    return 0;
}
