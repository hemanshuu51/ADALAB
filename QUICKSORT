#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Function to perform partition operation
int partition(int arr[], int low, int high) {
    int pivot = arr[low];  // Choosing the first element as pivot
    int i = low + 1;
    int j = high;

    while (1) {
        // Increment i while arr[i] <= pivot
        while (arr[i] <= pivot && i <= high) {
            i++;
        }

        // Decrement j while arr[j] > pivot
        while (arr[j] > pivot && j >= low) {
            j--;
        }

        // If i < j, swap arr[i] and arr[j]
        if (i < j) {
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        } else {
            // When i >= j, place pivot in its correct position
            arr[low] = arr[j];
            arr[j] = pivot;
            return j; // Return pivot position
        }
    }
}

// Quick Sort function
void quick_sort(int arr[], int low, int high) {
    if (low < high) {
        int pivot_pos = partition(arr, low, high);  // Get pivot index
        quick_sort(arr, low, pivot_pos - 1);  // Recursively sort left part
        quick_sort(arr, pivot_pos + 1, high);  // Recursively sort right part
    }
}

// Function to generate a random array
void generateRandomArray(int arr[], int N) {
    for (int i = 0; i < N; i++) {
        arr[i] = rand() % 1000;  // Random numbers between 0 and 999
    }
}

int main() {
    int N;
    int choice;

    // Get the number of elements
    printf("Enter the number of elements: ");
    scanf("%d", &N);

    int arr[N];  // Create an array of size N

    // Ask the user if they want a random array or input their own
    printf("Choose the input method:\n");
    printf("1. Random Array\n");
    printf("2. User Input Array\n");
    printf("Enter your choice (1 or 2): ");
    scanf("%d", &choice);

    if (choice == 1) {
        // Generate a random array
        generateRandomArray(arr, N);
    } else if (choice == 2) {
        // Get the array elements from the user
        printf("Enter the elements:\n");
        for (int i = 0; i < N; i++) {
            scanf("%d", &arr[i]);
        }
    } else {
        printf("Invalid choice! Exiting...\n");
        return 1;
    }

    // Record the start time
    clock_t start = clock();


    quick_sort(arr, 0, N - 1);


    clock_t end = clock();


    double time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;

    
    printf("Time taken to sort: %.6f seconds\n", time_taken);

    return 0;
}
